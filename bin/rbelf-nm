#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
# Copyright © 2007-2010 Diego Elio Pettenò <flameeyes@flameeyes.eu>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this generator; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# bsd-nm implementation based on elf.rb (very limited)

require 'elf/tools'
require 'getoptlong'

module Elf::Tools
  class NM < Elf::Tool

    def self.initialize
      super
      @options |= [
                   ["--dynamic", "-D", GetoptLong::NO_ARGUMENT],
                   ["--demangle", "-C", GetoptLong::NO_ARGUMENT],
                   ["--sort-by", "-S", GetoptLong::REQUIRED_ARGUMENT],
                   ["--show-version", "-V", GetoptLong::NO_ARGUMENT],
                  ]

      @scan_section = '.symtab'
      @demangle = false
      @exitval = 0
      @show_version = false

      @sort = :name
    end

    def self.dynamic_cb
      @scan_section = '.dynsym'
    end

    def self.sort_by_cb(attr)
      case attr
      when 'address'
        @sort = :address
      when 'name'
        @sort = :name
      when 'none'
        @sort = nil
      else
        puterror "invalid sort attribute: #{attr}"
        exit -1
      end
    end

    def self.analysis(file, param)
      symbols = []

      Elf::File.open(param) do |elf|
        if not elf.has_section? @scan_section
          puterror "No symbols"
          @exitval = 1
          return
        end

        elf[@scan_section].each do |sym|
          next if sym.name == ''
          begin
            code = sym.nm_code
          rescue Elf::Symbol::UnknownNMCode => e
            puterror(e.message)
            code = "?"
          end

          name = @demangle ? sym.demangle : sym.name

          if @show_version and sym.version
            name = sprintf("%s@%s%s",
                           name,
                           sym.version_default? ? '@' : '',
                           sym.version)
          end

          symbols << {
            :address => sym.address_string,
            :code => code,
            :name => name
          }
        end

        symbols.sort! { |x, y| x[@sort] <=> y[@sort] } unless @sort.nil?

        format_sym = "%#{elf.address_print_size}s %s %s\n"
        @output_mutex.synchronize {
          symbols.each do |sym|
            printf(format_sym,
                   sym[:address], sym[:code], sym[:name])
          end
        }
      end
    end

    def self.results
      exit @exitval
    end
  end
end
