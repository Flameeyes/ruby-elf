#!/usr/bin/env ruby
# -*- mode: ruby; coding: utf-8 -*-
# Copyright © 2008-2011 Diego E. "Flameeyes" Pettenò <flameeyes@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this generator; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# proof-of-concept reimplementation of readelf(1)

require 'elf/tools'

module Elf::Tools
  class ReadElf < Elf::Tool
    def self.initialize
      super
      @options |= [
                   ["--all", "-a", GetoptLong::NO_ARGUMENT],
                   ["--section-headers", "-S", GetoptLong::NO_ARGUMENT],
                   ["--dynamic", "-d", GetoptLong::NO_ARGUMENT],
                  ]
    end

    def self.all_cb
      @section_headers = true
      @dynamic = true
    end

    def self.after_options
    end

    def self.analysis(file)
      elf = Elf::File.open(file)

      @addrsize = (elf.elf_class == Elf::Class::Elf32 ? 8 : 16)

      @output_mutex.synchronize {
        printf("\nFile: %s\n", file) if @targets.size != 1
        read_sections(elf) if @section_headers
        read_dynamic(elf) if @dynamic
      }
    end

    def self.read_sections(elf)
      printf("There are %d section headers, starting at offset 0x%x:\n\nSection Headers:\n",
             elf.sections, elf.shoff)

      printf("[Nr] Name                 Type         Addr             Off      Size     ES Flags Lk Inf Al\n")

      elf.each_section do |section|
        flags_string = ""
        flags_string << "W" if section.flags.include?(Elf::Section::Flags::Write)
        flags_string << "A" if section.flags.include?(Elf::Section::Flags::Alloc)
        flags_string << "X" if section.flags.include?(Elf::Section::Flags::ExecInstr)

        printf("[%2d] %s %s %0#{@addrsize}x %08x %08x %2d %s %2d %3d %2d\n",
               section.index,
               section.name.ljust(20),
               section.type.mnemonic.upcase.ljust(12),
               section.addr, section.offset, section.size, section.entsize,
               flags_string.ljust(5), section.link.to_i, section.info, section.addralign)
      end

      printf("\n")
    end

    def self.read_dynamic(elf)
      dynsection = elf[".dynamic"]

      if dynsection.nil?
        printf("\nThere is no dynamic section in this file.\n")
        return
      end

      printf("\nDynamic section at offset 0x%x contains %d entries:\n",
             dynsection.offset, dynsection.size)
      printf("  Tag                Type                 Name/Value\n")

      dynsection.each_entry do |entry|
        case entry.type
        when Elf::Dynamic::Type::Needed
          val = "Shared library: [#{entry.parsed}]"
        when Elf::Dynamic::Type::Auxiliary
          val = "Auxiliary library: [#{entry.parsed}]"
        when Elf::Dynamic::Type::SoName
          val = "Library soname: [#{entry.parsed}]"
        when Elf::Dynamic::Type::StrSz, Elf::Dynamic::Type::SymEnt,
          Elf::Dynamic::Type::PltRelSz, Elf::Dynamic::Type::RelASz,
          Elf::Dynamic::Type::RelAEnt

          val = "#{entry.value} (bytes)"
        when Elf::Dynamic::Type::VerDefNum, Elf::Dynamic::Type::VerNeedNum, Elf::Dynamic::Type::RelACount
          val = entry.value
        when Elf::Dynamic::Type::GNUPrelinked
          val = entry.parsed.getutc.strftime('%Y-%m-%dT%H:%M:%S')
        else
          val = sprintf("0x%x", entry.value)
        end

        printf(" 0x%016x %-20s %s\n", entry.type.to_i, "(#{entry.type.to_s})", val)

        break if entry.type == Elf::Dynamic::Type::Null
      end
    end
  end
end
