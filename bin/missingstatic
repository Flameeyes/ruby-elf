#!/usr/bin/env ruby
# -*- mode: ruby; coding: utf-8 -*-
# Copyright © 2008-2010 Diego Elio Pettenò <flameeyes@flameeyes.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this generator; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# check for functions that are not used but in their translation unit

require 'elf/tools'

module Elf::Tools
  class MissingStatic < Elf::Tool
    def self.initialize
      super
      @options |= [
                   # Exclude functions with a given prefix (exported functions)
                   ["--exclude-regexp", "-x", GetoptLong::REQUIRED_ARGUMENT],
                   # Only scan hidden symbols, ignore exported ones
                   ["--hidden-only", "-h", GetoptLong::NO_ARGUMENT],
                   # Show the type of symbol (function, variable, constant)
                   ["--show-type", "-t", GetoptLong::NO_ARGUMENT],
                   # Exclude symbols present in a tags file (from exuberant-ctags)
                   ["--exclude-tags", "-X", GetoptLong::REQUIRED_ARGUMENT]
                  ]

      # List of patterns to exclude; this include all the used
      # symbols, the entrypoints to the system's dynamic loader, and
      # those provided by the user as to be ignored.
      #
      # For technical limits, we have two arrays, one includes all the
      # regular expressions given by the user, the other is a list of
      # full strings matching.
      @exclude_patterns = []
      @exclude_symbols = Set.new([ "main" ])

      @hidden_only = false
      @show_type = false

      @all_defined = []
    end

    def self.exclude_tags_cb(arg)
      @exclude_symbols |= File.readlines(arg).delete_if do |line|
        line[0..0] == '!' # Internal exuberant-ctags symbol
      end.collect do |line|
        line.split[0]
      end
    end

    def self.exclude_regexp_cb(arg)
      @exclude_patterns << Regexp.new(arg)
    end

    def self.analysis(filename)
      Elf::File.open(filename) do |elf|
        if elf.type != Elf::File::Type::Rel
          putnotice "#{file}: not an object file"
          next
        end
        unless elf.has_section?('.symtab')
          putnotice "#{file}: no .symtab section found"
          next
        end

        # Gather all the symbols, defined and missing in the translation unit
        elf['.symtab'].each do |sym|
          if sym.section == Elf::Section::Undef
            @exclude_symbols << sym.name
          elsif sym.bind == Elf::Symbol::Binding::Local
            next
          elsif (sym.section.is_a? Elf::Section) or
              (sym.section == Elf::Section::Common)
            next if @hidden_only and
              sym.visibility != Elf::Symbol::Visibility::Hidden

            @all_defined << sym
          end
        end
      end
    end

    def self.results
      @exclude_patterns << Regexp.union(@exclude_symbols.collect { |sym| /^#{Regexp.escape(sym)}$/ })
      exclusions = Regexp.union(@exclude_patterns)

      @all_defined.each do |symbol|
        next if symbol.name =~ exclusions

        if @show_type
          begin
            prefix = "#{symbol.nm_code} "
          rescue Elf::Symbol::UnknownNMCode => e
            puterror e.message
            prefix = "? "
          end
        end
        puts "#{prefix}#{symbol.name} (#{symbol.file.path})"
      end
    end
  end
end
